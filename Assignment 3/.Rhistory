nba_stats <- read.csv("NBA_Stats_23_24.csv")
# Count players with FT > 0.5 and AST > 0.7
filtered_data <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
# Output the count
filtered_data
install.packages("deplyr")
# Load necessary libraries
library(dplyr)
# Load the dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# Count players with FT > 0.5 and AST > 0.7
filtered_data <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
# Output the count
filtered_data
# Load necessary libraries
library(dplyr)
# Load the dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# Count players with FT > 0.5 and AST > 0.7
filtered_data <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
# Print the result
cat("The number of players with Free Throws per game greater than 0.5 and Assists per game greater than 0.7 is:", filtered_data)
# Load necessary libraries
library(dplyr)
# Load the dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# Count players with FT > 0.5 and AST > 0.7
filtered_data <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
# Print the result
cat("The number of players with Free Throws per game greater than 0.5 and Assists per game greater than 0.7 is:", filtered_data)
# Load necessary libraries
library(dplyr)
# Load the dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# Count players with FT > 0.5 and AST > 0.7
filtered_data <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
# Print the result
cat("The number of players with Free Throws per game greater than 0.5 and Assists per game greater than 0.7 is:",
filtered_data)
# Load necessary libraries
library(dplyr)
# Load the dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# Count players with FT > 0.5 and AST > 0.7
filtered_data <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
# Print the result
cat("The number of players with Free Throws per game greater than 0.5 and Assists per game greater than 0.7 is:",
filtered_data)
# Load necessary libraries
library(dplyr)
# Load the dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# Count players with FT > 0.5 and AST > 0.7
filtered_data <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
# Print the result
filtered_data
# Select the required columns and arrange by Points per game in descending order
top_10_players <- nba_stats %>%
select(Player, Tm, FG, TOV, PTS) %>%
arrange(desc(PTS)) %>%
head(10)
# Print the top 10 players
print(top_10_players)
# Find the player with the seventh highest points
seventh_highest_player <- top_10_players[7, "Player"]
cat("The player with the seventh highest points is:", seventh_highest_player)
# Select the required columns and arrange by Points per game in descending order
top_10_players <- nba_stats %>%
select(Player, Tm, FG, TOV, PTS) %>%
arrange(desc(PTS)) %>%
head(10)
# Print the top 10 players
print(top_10_players)
# Select the required columns and arrange by Points per game in descending order
top_10_players <- nba_stats %>%
select(Player, Tm, FG, TOV, PTS) %>%
arrange(desc(PTS)) %>%
head(10)
# Print the top 10 players
print(top_10_players)
# Find the player with the seventh highest points
seventh_highest_player <- top_10_players[7, "Player"]
cat("The player with the seventh highest points is:", seventh_highest_player)
# loading libraries
library(dplyr)
# loading dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# players with FT > 0.5 and AST > 0.7
filtered_data <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
print(filtered_data)
# loading libraries
library(dplyr)
# loading dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# players with FT > 0.5 and AST > 0.7
sort_players <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
print(sort_players)
# rearrangin in descending order
top_10_players <- nba_stats %>%
select(Player, Tm, FG, TOV, PTS) %>%
arrange(desc(PTS)) %>%
head(10)
# Print the top 10 players
print(top_10_players)
# player with seventh highest points
seventh_highest_player <- top_10_players[7, "Player"]
cat("The player with the seventh highest points is:", seventh_highest_player)
# adding columns
nba_stats <- nba_stats %>%
mutate(FGP = round((FG / FGA) * 100, 2),
FTP = round((FT / FTA) * 100, 2))
# Display the updated dataframe with the new columns
head(nba_stats)
# Find the FGP and FTP for Josh Giddey
josh_giddey_stats <- nba_stats %>%
filter(Player == "Josh Giddey") %>%
select(Player, FGP, FTP)
# Display the FGP and FTP for Josh Giddey
josh_giddey_stats
# adding columns
nba_stats <- nba_stats %>%
mutate(FGP = round((FG / FGA) * 100, 2),
FTP = round((FT / FTA) * 100, 2))
# Display the updated dataframe with the new columns
head(nba_stats)
# Find the FGP and FTP for Josh Giddey
josh_giddey_stats <- nba_stats %>%
filter(Player == "Josh Giddey") %>%
select(Player, FGP, FTP)
# Display the FGP and FTP for Josh Giddey
josh_giddey_stats
# adding columns
nba_stats <- nba_stats %>%
mutate(FGP = round((FG / FGA) * 100, 2),
FTP = round((FT / FTA) * 100, 2))
# Display the updated dataframe with the new columns
nba_stats
# adding columns
nba_stats <- nba_stats %>%
mutate(FGP = round((FG / FGA) * 100, 2),
FTP = round((FT / FTA) * 100, 2))
# Display the updated dataframe with the new columns
head(nba_stats)
# adding columns
nba_stats <- nba_stats %>%
mutate(FGP = round((FG / FGA) * 100, 2),
FTP = round((FT / FTA) * 100, 2))
# updated dataframe
nba_stats
# FGP and FTP for Josh Giddey
josh_giddey_stats <- nba_stats %>%
filter(Player == "Josh Giddey") %>%
select(Player, FGP, FTP)
josh_giddey_stats
# loading libraries
library(dplyr)
# loading dataset
nba_stats <- read.csv("NBA_Stats_23_24.csv")
# players with FT > 0.5 and AST > 0.7
n_players <- nba_stats %>%
filter(FT > 0.5, AST > 0.7) %>%
nrow()
# print result
print(n_players)
# rearrangin in descending order
top_10_players <- nba_stats %>%
select(Player, Tm, FG, TOV, PTS) %>%
arrange(desc(PTS)) %>%
head(10)
# print result
print(top_10_players)
# player with seventh highest points
seventh_highest_player <- top_10_players[7, "Player"]
cat("The player with the seventh highest points is:", seventh_highest_player)
# adding columns
nba_stats <- nba_stats %>%
mutate(FGP = round((FG / FGA) * 100, 2),
FTP = round((FT / FTA) * 100, 2))
# updated dataframe
head(nba_stats)
# FGP and FTP for Josh Giddey
josh_giddey_stats <- nba_stats %>%
filter(Player == "Josh Giddey") %>%
select(Player, FGP, FTP)
# print result
josh_giddey_stats
# creating new metrics
team_orb_stats <- nba_stats %>%
group_by(Tm) %>%
summarise(
Avg_ORB = mean(ORB, na.rm = TRUE),
Min_ORB = min(ORB, na.rm = TRUE),
Max_ORB = max(ORB, na.rm = TRUE)
) %>%
arrange(desc(Avg_ORB))
# print result
team_orb_stats
# team with the max Offensive rebounds per game
max_orb_team <- team_orb_stats %>%
filter(Max_ORB == max(Max_ORB)) %>%
select(Tm, Max_ORB)
# print result
max_orb_team
# team with the max Offensive rebounds per game
max_orb_team <- team_orb_stats %>%
filter(Max_ORB == max(Max_ORB)) %>%
select(Tm, Max_ORB)
# print result
max_orb_team
# Create a copy of the dataframe for imputation
nba_stats_copy1 <- nba_stats
nba_stats_copy2 <- nba_stats
# Method 1: Impute missing FTP as FGP * average FTP for that team
nba_stats_copy1 <- nba_stats_copy1 %>%
group_by(Tm) %>%
mutate(Avg_FTP = mean(FTP, na.rm = TRUE),  # Calculate average FTP for each team
FTP = ifelse(is.na(FTP), FGP * Avg_FTP / 100, FTP)) %>%  # Impute FTP
ungroup() %>%
select(-Avg_FTP)
# Method 2: Impute missing FTP with just the average FTP for that team
nba_stats_copy2 <- nba_stats_copy2 %>%
group_by(Tm) %>%
mutate(Avg_FTP = mean(FTP, na.rm = TRUE),  # Calculate average FTP for each team
FTP = ifelse(is.na(FTP), Avg_FTP, FTP)) %>%  # Impute FTP
ungroup() %>%
select(-Avg_FTP)
# Display both imputed datasets
head(nba_stats_copy1)
head(nba_stats_copy2)
# Create a copy of the dataframe for imputation
nba_stats_copy1 <- nba_stats
nba_stats_copy2 <- nba_stats
# Method 1: Impute missing FTP as FGP * average FTP for that team
nba_stats_copy1 <- nba_stats_copy1 %>%
group_by(Tm) %>%
mutate(Avg_FTP = mean(FTP, na.rm = TRUE),  # Calculate average FTP for each team
FTP = ifelse(is.na(FTP), FGP * Avg_FTP / 100, FTP)) %>%  # Impute FTP
ungroup() %>%
select(-Avg_FTP)
# print result
head(nba_stats_copy1)
# Create a copy of the dataframe for imputation
nba_stats_copy1 <- nba_stats
nba_stats_copy2 <- nba_stats
# Method 1: Impute missing FTP as FGP * average FTP for that team
nba_stats_copy1 <- nba_stats_copy1 %>%
group_by(Tm) %>%
mutate(Avg_FTP = mean(FTP, na.rm = TRUE),  # Calculate average FTP for each team
FTP = ifelse(is.na(FTP), FGP * Avg_FTP / 100, FTP)) %>%  # Impute FTP
ungroup() %>%
select(-Avg_FTP)
# print result
head(nba_stats_copy1)
# creating copies
nba_stats_copy1 <- nba_stats
nba_stats_copy2 <- nba_stats
# Method 1: Impute missing FTP as FGP * average FTP for that team
nba_stats_copy1 <- nba_stats_copy1 %>%
group_by(Tm) %>%
mutate(Avg_FTP = mean(FTP, na.rm = TRUE),
FTP = ifelse(is.na(FTP), FGP * Avg_FTP / 100, FTP)) %>%
ungroup() %>%
select(-Avg_FTP)
# print result
head(nba_stats_copy1)
# Method 2: Impute missing FTP with just the average FTP for that team
nba_stats_copy2 <- nba_stats_copy2 %>%
group_by(Tm) %>%
mutate(Avg_FTP = mean(FTP, na.rm = TRUE),
FTP = ifelse(is.na(FTP), Avg_FTP, FTP)) %>%
ungroup() %>%
select(-Avg_FTP)
# print result
head(nba_stats_copy2)
# loading packages
library(tidyr)
library(dplyr)
# loading dataset
data("billboard", package = "tidyr")
# tidying the dataset
billboard_tidy <- billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
) %>%
mutate(week = parse_number(week))
install.packages("readr")
# loading packages
library(tidyr)
library(dplyr)
library(readr)
# loading dataset
data("billboard", package = "tidyr")
# tidying the dataset
billboard_tidy <- billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
) %>%
mutate(week = parse_number(week))
# print result
head(billboard_tidy)
# dataset without dropping NA
billboard_no_drop <- billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank"
)
initial_count <- nrow(billboard_no_drop)
# tidying data
billboard_with_drop <- billboard %>%
pivot_longer(
cols = starts_with("wk"),
names_to = "week",
values_to = "rank",
values_drop_na = TRUE
)
final_count <- nrow(billboard_with_drop)
entries_removed <- initial_count - final_count
# print result
entries_removed
# implicit_missing data frame
implicit_missing <- billboard_tidy %>%
group_by(track) %>%
summarise(min_week = min(week), max_week = max(week)) %>%
rowwise() %>%
mutate(missing_weeks = list(setdiff(seq(min_week, max_week), billboard_tidy$week[billboard_tidy$track == track]))) %>%
filter(length(missing_weeks) > 0)
# print result
implicit_missing
# Check the data types of the features
str(billboard_tidy)
# Convert 'date.entered' to Date type if it isn't already
billboard_tidy <- billboard_tidy %>%
mutate(date.entered = as.Date(date.entered, format = "%Y-%m-%d"))
# Check again to confirm the correct types
str(billboard_tidy)
# Check the data types of the features
str(billboard_tidy)
# data types of features
str(billboard_tidy)
# data types of features
str(billboard_tidy)
# converting 'date.entered' to Date type
billboard_tidy <- billboard_tidy %>%
mutate(date.entered = as.Date(date.entered, format = "%Y-%m-%d"))
str(billboard_tidy)
install.packages("ggplot2")
# loading ggplot2
library(ggplot2)
# average rank for each week
average_rank_by_week <- billboard_tidy %>%
group_by(week) %>%
summarise(average_rank = mean(rank, na.rm = TRUE))
# Plot the average rank over time (weeks)
ggplot(average_rank_by_week, aes(x = week, y = average_rank)) +
geom_line() +
geom_point() +
scale_y_reverse() +  # Invert y-axis because lower rank is better
labs(
title = "Average Song Rank Over Time (Weeks on the Billboard Chart)",
x = "Week",
y = "Average Rank"
) +
theme_minimal()
# loading ggplot2
library(ggplot2)
# number of weeks each song stayed on the chart
weeks_on_chart <- billboard_tidy %>%
group_by(track) %>%
summarise(weeks_on_chart = max(week) - min(week) + 1)
# plotting the results
ggplot(weeks_on_chart, aes(x = weeks_on_chart)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "black") +
labs(
title = "Distribution of Song Duration on Billboard Chart (in Weeks)",
x = "Number of Weeks on Chart",
y = "Number of Songs"
) +
theme_minimal()
# "Kryptonite" by 3 Doors Down
kryptonite_data <- billboard_tidy %>%
filter(track == "Kryptonite")
# rank progression over time
ggplot(kryptonite_data, aes(x = week, y = rank)) +
geom_line() +
geom_point() +
scale_y_reverse() +
labs(
title = "Rank Progression of 'Kryptonite' by 3 Doors Down Over Time",
x = "Week",
y = "Rank"
) +
theme_minimal()
# count of songs per artists(top 15)
top_artists <- billboard_tidy %>%
group_by(artist) %>%
summarise(song_count = n_distinct(track)) %>%
arrange(desc(song_count)) %>%
slice(1:15)
# plotting the data
ggplot(top_artists, aes(x = reorder(artist, song_count), y = song_count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
coord_flip() +
labs(
title = "Top 15 Artists by Number of Songs on the Billboard Chart",
x = "Artist",
y = "Number of Songs"
) +
theme_minimal()
# count of songs per artists(top 15)
top_artists <- billboard_tidy %>%
group_by(artist) %>%
summarise(song_count = n_distinct(track)) %>%
arrange(desc(song_count)) %>%
slice(1:15)
# plotting the data
ggplot(top_artists, aes(x = reorder(artist, song_count), y = song_count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
labs(
title = "Top 15 Artists by Number of Songs on the Billboard Chart",
x = "Artist",
y = "Number of Songs"
) +
theme_minimal()
# count of songs per artists(top 15)
top_artists <- billboard_tidy %>%
group_by(artist) %>%
summarise(song_count = n_distinct(track)) %>%
arrange(desc(song_count)) %>%
slice(1:15)
# plotting the data
ggplot(top_artists, aes(x = reorder(artist, song_count), y = song_count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
coord_flip() +
labs(
title = "Top 15 Artists by Number of Songs on the Billboard Chart",
x = "Artist",
y = "Number of Songs"
) +
theme_minimal()
# count of songs per artists(top 15)
top_artists <- billboard_tidy %>%
group_by(artist) %>%
summarise(song_count = n_distinct(track)) %>%
arrange(desc(song_count)) %>%
slice(1:15)
# plotting the data
ggplot(top_artists, aes(x = reorder(artist, song_count), y = song_count)) +
geom_bar(stat = "identity", fill = "skyblue", color = "black") +
coord_flip() +
labs(
title = "Artist Vs Number of songs",
x = "Artist",
y = "Number of Songs"
) +
theme_minimal()
# loading RevQtr
RevQtr <- read.csv("RevQtr.csv")
# Tidy the dataset using pivot_longer
RevQtr_tidy <- RevQtr %>%
pivot_longer(
cols = starts_with("Qtr"),       # Select all quarter columns
names_to = "Interval_ID",         # New column for quarter number
values_to = "Revenue"             # New column for the revenue values
) %>%
mutate(Interval_Type = "Qtr",       # Create a new column Interval_Type with value 'Qtr'
Interval_ID = parse_number(Interval_ID)) %>%  # Extract the quarter number from the names
select(Group, Year, Interval_Type, Interval_ID, Revenue)  # Reorder columns
# Display the first few rows
head(RevQtr_tidy)
# To get the number of rows in the new dataset
nrow(RevQtr_tidy)
# loading RevQtr
RevQtr <- read.csv("RevQtr.csv")
# Tidy the dataset using pivot_longer
RevQtr_tidy <- RevQtr %>%
pivot_longer(
cols = starts_with("Qtr"),
names_to = "Interval_ID",
values_to = "Revenue"
) %>%
mutate(Interval_Type = "Qtr",
Interval_ID = parse_number(Interval_ID)) %>%
select(Group, Year, Interval_Type, Interval_ID, Revenue)
# Display the first few rows
head(RevQtr_tidy)
# To get the number of rows in the new dataset
nrow(RevQtr_tidy)
