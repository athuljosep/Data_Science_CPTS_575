# Plot the map for year2
map2 <- ggplot(map_data_year2, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year2)) +
labs(fill = "Total Votes")
print(map2)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(maps)
# Load the data
file_path <- "us-presidents.csv"
us_presidents <- read.csv(file_path)
# Filter data for two election years of your choice (example: 2000 and 2016)
year1 <- 2000
year2 <- 2014
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(states_map, election_data, by = "region", all.x = TRUE)
return(merged_data)
}
# Prepare data for the maps
map_data_year1 <- prepare_map_data(data_year1)
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map for year1
map1 <- ggplot(map_data_year1, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year1)) +
labs(fill = "Total Votes")
# Display the maps
print(map1)
# Plot the map for year2
map2 <- ggplot(map_data_year2, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year2)) +
labs(fill = "Total Votes")
print(map2)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(maps)
# Load the data
file_path <- "us-presidents.csv"
us_presidents <- read.csv(file_path)
# Filter data for two election years of your choice (example: 2000 and 2016)
year1 <- 2001
year2 <- 2013
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(states_map, election_data, by = "region", all.x = TRUE)
return(merged_data)
}
# Prepare data for the maps
map_data_year1 <- prepare_map_data(data_year1)
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map for year1
map1 <- ggplot(map_data_year1, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year1)) +
labs(fill = "Total Votes")
# Display the maps
print(map1)
# Plot the map for year2
map2 <- ggplot(map_data_year2, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year2)) +
labs(fill = "Total Votes")
print(map2)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(maps)
# Load the data
file_path <- "us-presidents.csv"
us_presidents <- read.csv(file_path)
# Filter data for two election years of your choice (example: 2000 and 2016)
year1 <- 2000
year2 <- 2016
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(states_map, election_data, by = "region", all.x = TRUE)
return(merged_data)
}
# Prepare data for the maps
map_data_year1 <- prepare_map_data(data_year1)
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map for year1
map1 <- ggplot(map_data_year1, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year1)) +
labs(fill = "Total Votes")
# Display the maps
print(map1)
# Load necessary libraries
library(plotly)
install.packages("plotly")
# Load necessary libraries
library(plotly)
library(dplyr)
library(maps)
# Load the data
file_path <- "path_to_your_csv_file/us-presidents.csv"  # Replace with your CSV file path
us_presidents <- read.csv(file_path)
# Load necessary libraries
library(plotly)
library(dplyr)
library(maps)
# Load the data
file_path <- "us-presidents.csv"  # Replace with your CSV file path
us_presidents <- read.csv(file_path)
# Filter data for two election years of your choice (example: 2008 and 2020)
year1 <- 2008
year2 <- 2020
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(states_map, election_data, by = "region", all.x = TRUE)
return(merged_data)
}
# Prepare data for the maps
map_data_year1 <- prepare_map_data(data_year1)
map_data_year2 <- prepare_map_data(data_year2)
# Create an interactive plot for year1
map1 <- plot_ly(
type = 'choropleth',
locations = map_data_year1$region,
locationmode = 'USA-states',
z = map_data_year1$totalvotes,
text = map_data_year1$region,
colorscale = 'Blues',
colorbar = list(title = "Total Votes"),
marker = list(line = list(color = "white", width = 1))
) %>%
layout(title = paste("Total Presidential Votes by State in", year1),
geo = list(scope = 'usa'))
# Create an interactive plot for year2
map2 <- plot_ly(
type = 'choropleth',
locations = map_data_year2$region,
locationmode = 'USA-states',
z = map_data_year2$totalvotes,
text = map_data_year2$region,
colorscale = 'Blues',
colorbar = list(title = "Total Votes"),
marker = list(line = list(color = "white", width = 1))
) %>%
layout(title = paste("Total Presidential Votes by State in", year2),
geo = list(scope = 'usa'))
# Show the maps
map1
map2
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(maps)
# Load the data
file_path <- "path_to_your_csv_file/us-presidents.csv"  # Replace with your CSV file path
us_presidents <- read.csv(file_path)
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(maps)
# Load the data
file_path <- "us-presidents.csv"  # Replace with your CSV file path
us_presidents <- read.csv(file_path)
# Filter data for two election years of your choice (example: 2000 and 2016)
year1 <- 2000
year2 <- 2016
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(states_map, election_data, by = "region", all.x = TRUE)
return(merged_data)
}
# Prepare data for the maps
map_data_year1 <- prepare_map_data(data_year1)
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map for year1
map1 <- ggplot(map_data_year1, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year1)) +
labs(fill = "Total Votes")
# Display the maps
print(map1)
# Plot the map for year2
map2 <- ggplot(map_data_year2, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year2)) +
labs(fill = "Total Votes")
print(map2)
# loading libraries
library(ggplot2)
library(dplyr)
library(maps)
# loading data
us_presidents <- read.csv("us-presidents.csv")
# Filter data for two election years of your choice (example: 2000 and 2016)
year1 <- 2000
year2 <- 2016
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(states_map, election_data, by = "region", all.x = TRUE)
return(merged_data)
}
# Prepare data for the maps
map_data_year1 <- prepare_map_data(data_year1)
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map for year1
map1 <- ggplot(map_data_year1, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year1)) +
labs(fill = "Total Votes")
# Display the maps
print(map1)
# loading libraries
library(ggplot2)
library(dplyr)
library(maps)
# loading data
us_presidents <- read.csv("us-presidents.csv")
# sample years
year1 <- 2000
year2 <- 2016
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(states_map, election_data, by = "region", all.x = TRUE)
return(merged_data)
}
# Plotting data
map_data_year1 <- prepare_map_data(data_year1)
# Plot the map for year1
map1 <- ggplot(map_data_year1, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year1)) +
labs(fill = "Total Votes")
# Display the maps
print(map1)
# Plotting data
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map for year2
map2 <- ggplot(map_data_year2, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year2)) +
labs(fill = "Total Votes")
print(map2)
# loading libraries
library(ggplot2)
library(dplyr)
library(maps)
# loading data
us_presidents <- read.csv("us-presidents.csv")
# sample years
year1 <- 2000
year2 <- 2016
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(states_map, election_data, by = "region", all.x = TRUE)
return(merged_data)
}
# Plotting data
map_data_year1 <- prepare_map_data(data_year1)
# Plot the map1
map1 <- ggplot(map_data_year1, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year1)) +
labs(fill = "Total Votes")
print(map1)
# Plotting data
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map2
map2 <- ggplot(map_data_year2, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year2)) +
labs(fill = "Total Votes")
print(map2)
# loading libraries
library(wordcloud)
my_text <- tolower(readLines("Research.txt", warn = FALSE))
my_text <- gsub("[[:punct:][:digit:]]", " ", my_text)
wordcloud(words = unlist(strsplit(my_text, " ")),
min.freq = 1,
scale = c(3, 0.5),
colors = brewer.pal(6, "Dark2"))
# loading libraries
library(wordcloud)
my_text <- tolower(readLines("Research.txt", warn = FALSE))
my_text <- gsub("[[:punct:][:digit:]]", " ", my_text)
wordcloud(words = unlist(strsplit(my_text, " ")),
min.freq = 1,
scale = c(3, 0.5),
colors = brewer.pal(6, "Dark2"))
long_tenure_managers <- combined_count %>%
filter(num_seasons > 20)
head(long_tenure_managers)
# loading libraries
library(wordcloud)
# plotting wordcloud
my_text <- tolower(readLines("Research.txt", warn = FALSE))
my_text <- gsub("[[:punct:][:digit:]]", " ", my_text)
wordcloud(words = unlist(strsplit(my_text, " ")),
min.freq = 1,
scale = c(3, 0.5),
colors = brewer.pal(6, "Dark2"))
# filter teams
teams_2015 <- Teams %>%
filter(lgID == "AL", yearID == 2015) %>%
select(teamID, yearID, HR)
# filter batting
batting_2015 <- Batting %>%
filter(yearID == 2015) %>%
select(teamID, yearID, RBI)
# join operation
joined_data_2015 <- inner_join(
teams_2015,
batting_2015,
by = c("teamID", "yearID")
)
# summary
hr_summary <- joined_data_2015 %>%
group_by(teamID, yearID) %>%
summarise(
total_HR = sum(HR, na.rm = TRUE),
.groups = 'drop'
)
# print result
n_HR <- sum(hr_summary$total_HR, na.rm = TRUE)
print(paste("Total Home Runs:", n_HR))
# loading libraries
library(ggplot2)
library(dplyr)
library(maps)
# loading data
us_presidents <- read.csv("us-presidents.csv")
# sample years
year1 <- 2000
year2 <- 2016
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(
states_map,
election_data,
by = "region",
all.x = TRUE
)
return(merged_data)
}
# Plotting data
map_data_year1 <- prepare_map_data(data_year1)
# Plot the map1
map1 <- ggplot(map_data_year1, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year1)) +
labs(fill = "Total Votes")
print(map1)
# Plotting data
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map2
map2 <- ggplot(map_data_year2, aes(x = long, y = lat, group = group, fill = totalvotes)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(low = "lightblue", high = "darkblue") +
ggtitle(paste("Total Presidential Votes by State in", year2)) +
labs(fill = "Total Votes")
print(map2)
# loading libraries
library(ggplot2)
library(dplyr)
library(maps)
# loading data
us_presidents <- read.csv("us-presidents.csv")
# sample years
year1 <- 2000
year2 <- 2016
data_year1 <- us_presidents %>% filter(year == year1)
data_year2 <- us_presidents %>% filter(year == year2)
# Get map data for the US
states_map <- map_data("state")
# Function to merge state data with total votes
prepare_map_data <- function(election_data) {
election_data$region <- tolower(election_data$state)
merged_data <- merge(
states_map,
election_data,
by = "region",
all.x = TRUE
)
return(merged_data)
}
# Plotting data
map_data_year1 <- prepare_map_data(data_year1)
# Plot the map1
map1 <- ggplot(
map_data_year1,
aes(x = long, y = lat, group = group, fill = totalvotes)
) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(
low = "lightblue",
high = "darkblue"
) +
ggtitle(
paste("Total Presidential Votes by State in", year1)
) +
labs(fill = "Total Votes")
print(map1)
# Plotting data
map_data_year2 <- prepare_map_data(data_year2)
# Plot the map2
map2 <- ggplot(
map_data_year2,
aes(x = long, y = lat, group = group, fill = totalvotes)
) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
theme_minimal() +
scale_fill_gradient(
low = "lightblue",
high = "darkblue"
) +
ggtitle(
paste("Total Presidential Votes by State in", year2)
) +
labs(fill = "Total Votes")
print(map2)
