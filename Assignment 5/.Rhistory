predictors <- setdiff(names(Boston), "crim")
# fit a simple linear regression model
models <- list()
for (predictor in predictors) {
# Construct formula for each model
formula <- as.formula(paste("crim ~", predictor))
# Fit the linear model
model <- lm(formula, data = Boston)
# Save the model in the list (optional)
models[[predictor]] <- model
# Print the formula to confirm the model has been fitted (optional)
cat("Fitted model for:", formula, "\n")
}
install.packages("MASS")
install.packages("MASS")
install.packages("MASS")
# loading MASS library and Boston dataset
library(MASS)
data("Boston")
# predictors
predictors <- setdiff(names(Boston), "crim")
# fit a simple linear regression model
models <- list()
for (predictor in predictors) {
# Construct formula for each model
formula <- as.formula(paste("crim ~", predictor))
# Fit the linear model
model <- lm(formula, data = Boston)
# Save the model in the list (optional)
models[[predictor]] <- model
# Print the formula to confirm the model has been fitted (optional)
cat("Fitted model for:", formula, "\n")
}
# loading MASS library and Boston dataset
library(MASS)
data("Boston")
# predictors
predictors <- setdiff(names(Boston), "crim")
# fit a simple linear regression model
model_rm <- lm(crim ~ rm, data = Boston)
model_age <- lm(crim ~ age, data = Boston)
model_dis <- lm(crim ~ dis, data = Boston)
model_rad <- lm(crim ~ rad, data = Boston)
model_tax <- lm(crim ~ tax, data = Boston)
model_ptratio <- lm(crim ~ ptratio, data = Boston)
model_black <- lm(crim ~ black, data = Boston)
model_lstat <- lm(crim ~ lstat, data = Boston)
model_medv <- lm(crim ~ medv, data = Boston)
model_zn <- lm(crim ~ zn, data = Boston)
model_indus <- lm(crim ~ indus, data = Boston)
model_chas <- lm(crim ~ chas, data = Boston)
model_nox <- lm(crim ~ nox, data = Boston)
# loading MASS library and Boston dataset
library(MASS)
data("Boston")
# predictors
predictors <- setdiff(names(Boston), "crim")
predictors
# fit a simple linear regression model
model_zn      <- lm(crim ~ zn, data = Boston)
model_indus   <- lm(crim ~ indus, data = Boston)
model_chas    <- lm(crim ~ chas, data = Boston)
model_nox     <- lm(crim ~ nox, data = Boston)
model_rm      <- lm(crim ~ rm, data = Boston)
model_age     <- lm(crim ~ age, data = Boston)
model_dis     <- lm(crim ~ dis, data = Boston)
model_rad     <- lm(crim ~ rad, data = Boston)
model_tax     <- lm(crim ~ tax, data = Boston)
model_ptratio <- lm(crim ~ ptratio, data = Boston)
model_black   <- lm(crim ~ black, data = Boston)
model_lstat   <- lm(crim ~ lstat, data = Boston)
model_medv    <- lm(crim ~ medv, data = Boston)
summary(model_nox)
summary(model_chas)
summary(model_rm)
summary(model_dis)
summary(model_medv)
summary(model_nox)
summary(model_chas)
summary(model_rm)
summary(model_dis)
summary(model_medv)
# Extract the coefficients and p-values
coeff_df <- as.data.frame(model_summary$coefficients)
# Filter predictors with p-values < 0.05
significant_pred <- coeff_df[coefficients_df$`Pr(>|t|)` < 0.05, ]
print(significant_pred)
# Extract the coefficients and p-values
coeff_df <- as.data.frame(model_summary$coefficients)
# Filter predictors with p-values < 0.05
significant_pred <- coeff_df[coeff_df$`Pr(>|t|)` < 0.05, ]
print(significant_pred)
# Filter predictors with p-values >= 0.05
non_significant_pred <- coeff_df[coeff_df$`Pr(>|t|)` >= 0.05, ]
print(non_significant_predictors)
#  multiple regression model with all predictors
model_full <- lm(crim ~ ., data = Boston)
# print summary
summary(model_full)
library(ggplot2)
library(reshape2)
multiple_pvalues <- summary(model_full)$coefficients[, "Pr(>|t|)"]
# Function to get p-values from simple linear regression models
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
# Get p-values from simple regression for all predictors
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# Combine p-values into a data frame
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues[-1]  # Exclude intercept
)
# Reshape the data for plotting
comparison_long <- melt(comparison_df, id.vars = "Predictor",
variable.name = "Model", value.name = "p_value")
# Create a bar plot to compare p-values
ggplot(comparison_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +  # Log scale to handle small p-values
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(reshape2)
multiple_pvalues <- summary(model_full)$coefficients[, "Pr(>|t|)"]
# Function to get p-values from simple linear regression models
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
# Get p-values from simple regression for all predictors
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# Combine p-values into a data frame
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues[-1]  # Exclude intercept
)
# Reshape the data for plotting
comparison_long <- melt(comparison_df, id.vars = "Predictor",
variable.name = "Model", value.name = "p_value")
# Create a bar plot to compare p-values
ggplot(comparison_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
#scale_y_log10() +  # Log scale to handle small p-values
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(reshape2)
multiple_pvalues <- summary(model_full)$coefficients[, "Pr(>|t|)"]
# Function to get p-values from simple linear regression models
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
# Get p-values from simple regression for all predictors
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# Combine p-values into a data frame
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues[-1]  # Exclude intercept
)
# Reshape the data for plotting
comparison_long <- melt(comparison_df, id.vars = "Predictor",
variable.name = "Model", value.name = "p_value")
# Create a bar plot to compare p-values
ggplot(comparison_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +  # Log scale to handle small p-values
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
library(reshape2)
multiple_pvalues <- summary(model_full)$coefficients[, "Pr(>|t|)"]
# Function to get p-values from simple linear regression models
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
# Get p-values from simple regression for all predictors
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# Combine p-values into a data frame
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues[-1]  # Exclude intercept
)
# Reshape the data for plotting
comparison_long <- melt(comparison_df, id.vars = "Predictor",
variable.name = "Model", value.name = "p_value")
# Create a bar plot to compare p-values
ggplot(comparison_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +  # Log scale to handle small p-values
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
theme(axis.text.x = element_text( hjust = 1))
library(ggplot2)
library(reshape2)
multiple_pvalues <- summary(model_full)$coefficients[, "Pr(>|t|)"]
# Function to get p-values from simple linear regression models
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
# Get p-values from simple regression for all predictors
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# Combine p-values into a data frame
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues[-1]  # Exclude intercept
)
# Reshape the data for plotting
comparison_long <- melt(comparison_df, id.vars = "Predictor",
variable.name = "Model", value.name = "p_value")
# Create a bar plot to compare p-values
ggplot(comparison_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +  # Log scale to handle small p-values
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# Fit the multiple regression model with all predictors
multiple_pvalues <- summary(model_full)$coefficients[-1, "Pr(>|t|)"]  # Exclude intercept
# Function to get p-values from simple linear regression models
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
# Get p-values from simple regression for all predictors
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# Create a data frame for plotting
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues
)
# Reshape data for plotting without melt()
comparison_df_long <- data.frame(
Predictor = rep(comparison_df$Predictor, 2),
Model = c(rep("Simple Regression", length(predictors)),
rep("Multiple Regression", length(predictors))),
p_value = c(comparison_df$Simple_Regression, comparison_df$Multiple_Regression)
)
# Create the bar plot
ggplot(comparison_df_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +  # Use log scale for better visualization
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Load necessary libraries
library(MASS)
library(ggplot2)
# Load the Boston dataset
data("Boston")
# Fit the multiple regression model with all predictors
model_full <- lm(crim ~ ., data = Boston)
multiple_pvalues <- summary(model_full)$coefficients[-1, "Pr(>|t|)"]  # Exclude intercept
# Function to get p-values from simple linear regression models
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
# Get p-values from simple regression for all predictors
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# Create a data frame for plotting
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues
)
# Create a scatter plot for p-values comparison
ggplot(comparison_df, aes(x = Simple_Regression, y = Multiple_Regression, label = Predictor)) +
geom_point(color = "blue", size = 3) +
geom_text(vjust = -0.5, size = 3) +
scale_x_log10() +  # Log scale for better visualization of small p-values
scale_y_log10() +  # Log scale for y-axis as well
labs(
title = "Comparison of P-values: Simple vs. Multiple Regression",
x = "P-value (Simple Regression, log scale)",
y = "P-value (Multiple Regression, log scale)"
) +
theme_minimal()
library(ggplot2)
# exclude intercept
multiple_pvalues <- summary(model_full)$coefficients[-1, "Pr(>|t|)"]
# get p values from simple
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# collect data
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues
)
# df for plotting
comparison_df_long <- data.frame(
Predictor = rep(comparison_df$Predictor, 2),
Model = c(rep("Simple Regression", length(predictors)),
rep("Multiple Regression", length(predictors))),
p_value = c(comparison_df$Simple_Regression, comparison_df$Multiple_Regression)
)
# plotting bar plot
ggplot(comparison_df_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# exclude intercept
multiple_pvalues <- summary(model_full)$coefficients[-1, "Pr(>|t|)"]
# get p values from simple
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# collect data
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues
)
# df for plotting
comparison_df_long <- data.frame(
Predictor = rep(comparison_df$Predictor, 2),
Model = c(rep("Simple Regression", length(predictors)),
rep("Multiple Regression", length(predictors))),
p_value = c(comparison_df$Simple_Regression, comparison_df$Multiple_Regression)
)
# plotting bar plot
ggplot(comparison_df_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# exclude intercept
multiple_pvalues <- summary(model_full)$coefficients[-1, "Pr(>|t|)"]
# get p values from simple
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# collect data
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues
)
# df for plotting
comparison_df_long <- data.frame(
Predictor = rep(comparison_df$Predictor, 2),
Model = c(rep("Simple Regression", length(predictors)),
rep("Multiple Regression", length(predictors))),
p_value = c(comparison_df$Simple_Regression, comparison_df$Multiple_Regression)
)
# plotting bar plot
ggplot(comparison_df_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor") +
#theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# exclude intercept
multiple_pvalues <- summary(model_full)$coefficients[-1, "Pr(>|t|)"]
# get p values from simple
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# collect data
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues
)
# df for plotting
comparison_df_long <- data.frame(
Predictor = rep(comparison_df$Predictor, 2),
Model = c(rep("Simple Regression", length(predictors)),
rep("Multiple Regression", length(predictors))),
p_value = c(comparison_df$Simple_Regression, comparison_df$Multiple_Regression)
)
# plotting bar plot
ggplot(comparison_df_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor")
#theme(axis.text.x = element_text(angle = 45, hjust = 1))
library(ggplot2)
# exclude intercept
multiple_pvalues <- summary(model_full)$coefficients[-1, "Pr(>|t|)"]
# get p values from simple
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# collect data
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues
)
# df for plotting
comparison_df_long <- data.frame(
Predictor = rep(comparison_df$Predictor, 2),
Model = c(rep("Simple Regression", length(predictors)),
rep("Multiple Regression", length(predictors))),
p_value = c(comparison_df$Simple_Regression, comparison_df$Multiple_Regression)
)
# plotting bar plot
ggplot(comparison_df_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor")
library(ggplot2)
# exclude intercept
multiple_pvalues <- summary(model_full)$coefficients[-1, "Pr(>|t|)"]
# get p values from simple
get_simple_pvalue <- function(predictor) {
model <- lm(as.formula(paste("crim ~", predictor)), data = Boston)
summary(model)$coefficients[2, "Pr(>|t|)"]
}
predictors <- names(Boston)[names(Boston) != "crim"]
simple_pvalues <- sapply(predictors, get_simple_pvalue)
# collect data
comparison_df <- data.frame(
Predictor = predictors,
Simple_Regression = simple_pvalues,
Multiple_Regression = multiple_pvalues
)
# df for plotting
comparison_df_long <- data.frame(
Predictor = rep(comparison_df$Predictor, 2),
Model = c(rep("Simple Regression", length(predictors)),
rep("Multiple Regression", length(predictors))),
p_value = c(comparison_df$Simple_Regression, comparison_df$Multiple_Regression)
)
# plotting bar plot
ggplot(comparison_df_long, aes(x = Predictor, y = p_value, fill = Model)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_log10() +
labs(title = "Comparison of P-values: Simple vs. Multiple Regression",
y = "P-value (log scale)", x = "Predictor")
# polynomial regression model for 'age' with degree 3
model_age <- lm(crim ~ poly(age, 3), data = Boston)
summary(model_age)
# polynomial regression model for 'tax' with degree 3
model_tax <- lm(crim ~ poly(tax, 3), data = Boston)
summary(model_tax)
# Visualize the non-linear relationship for 'age'
ggplot(Boston, aes(x = age, y = crim)) +
geom_point(alpha = 0.4) +
stat_smooth(method = "lm", formula = y ~ poly(x, 3), color = "blue", se = FALSE) +
labs(title = "Non-linear Relationship between Age and Crime Rate",
x = "Age", y = "Crime Rate")
# Visualize the non-linear relationship for 'tax'
ggplot(Boston, aes(x = tax, y = crim)) +
geom_point(alpha = 0.4) +
stat_smooth(method = "lm", formula = y ~ poly(x, 3), color = "red", se = FALSE) +
labs(title = "Non-linear Relationship between Tax and Crime Rate",
x = "Tax", y = "Crime Rate")
# polynomial regression model for 'age' with degree 3
model_age <- lm(crim ~ poly(age, 3), data = Boston)
summary(model_age)
model_age <- lm(crim ~ poly(age, 3), data = Boston)
summary(model_age)
ggplot(Boston, aes(x = age, y = crim)) +
geom_point(alpha = 0.4) +
stat_smooth(method = "lm", formula = y ~ poly(x, 3), color = "blue", se = FALSE) +
labs(title = "Non-linear Relationship between Age and Crime Rate",
x = "Age", y = "Crime Rate")
model_tax <- lm(crim ~ poly(tax, 3), data = Boston)
summary(model_tax)
ggplot(Boston, aes(x = tax, y = crim)) +
geom_point(alpha = 0.4) +
stat_smooth(method = "lm", formula = y ~ poly(x, 3), color = "red", se = FALSE) +
labs(title = "Non-linear Relationship between Tax and Crime Rate",
x = "Tax", y = "Crime Rate")
