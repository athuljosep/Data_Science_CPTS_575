---
title: "Assignment 5.b"
author: |
  Athul Jose P \\ 
  11867566
dept: "School of Electrical Engineering and Computer Science"
uni: "Washington State University"
subtitle: "CptS 575 Data Science"
geometry: margin=1in
fontsize: 12pt
format: pdf
header-includes:
  - \usepackage{titling}
  - \pretitle{\begin{center}\Huge\bfseries}
  - \posttitle{\par\end{center}\vfill}
  - \preauthor{\begin{center}\Large}
  - \postauthor{\par\end{center}\vfill}
  - \predate{\begin{center}\Large}
  - \postdate{\par\end{center}\vfill}
  - \usepackage{fancyhdr}
  - \fancypagestyle{plain}{
      \fancyhf{}
      \renewcommand{\headrulewidth}{0pt}
      \renewcommand{\footrulewidth}{0pt}
      \fancyfoot[C]{\thepage}
    }
  - \pagestyle{empty}
---

```{=tex}
\begin{center}
{\Large Athul Jose P \\ 11867566} \\[0.5cm]
{\large School of Electrical Engineering and Computer Science} \\[0.5cm]
{\large Washington State University} \\[0.5cm]
{\large CptS 575 Data Science} \\[0.5cm]
\end{center}
```
```{r}
#| label: load-packages
#| include: false

library(tidyverse)
```

\newpage

### **1.**

```{r}
# loading libraries
library(readr)
library(tm)
library(SnowballC)
library(quanteda)

# loading dataset
data <- read_csv("bbc.csv", show_col_types = FALSE)

# preprocessing and creating dtm
corpus <- corpus(data$text)
corpus <- tokens(corpus, 
                what = "word", 
                remove_punct = TRUE, 
                remove_numbers = TRUE) %>%
                tokens_tolower() %>%
                tokens_remove(stopwords("english")) %>%
                tokens_wordstem(language = "en")

dtm <- dfm(corpus)

# top 85% frequency
term_freq <- colSums(as.matrix(dtm))
term_freq <- sort(term_freq, decreasing = TRUE)
threshold <- quantile(term_freq, 0.15)
dtm_thres <- dtm[, term_freq >= threshold]

# 2205th article
article_vector <- as.matrix(dtm_thres[2205, ])
article_vector_filtered <- article_vector[article_vector >= 4]
print(article_vector_filtered)
```

\newpage

### **2.**

```{r}
# loading libraries
library(quanteda)
library(caret)
library(naivebayes)
library(nnet)
library(dplyr)

dtm_df <- as.data.frame(as.matrix(dtm_thres))

# dtm reduction using variance
feature_variances <- apply(dtm_df, 2, var)
variance_threshold <- 0.01
dtm_reduced <- dtm_df[, feature_variances > variance_threshold]

# Print dimensions
print(dim(dtm_df))
print(dim(dtm_reduced))
```

```{r}
# splitting into train and test
data_split <- cbind(category = data$category, dtm_reduced)
set.seed(123)
train_index <- createDataPartition(data_split$category, p = 0.8, list = FALSE)
train_data <- data_split[train_index, ]
test_data <- data_split[-train_index, ]

# Check the balance of categories in the train and test sets
print(table(train_data$category))
print(table(test_data$category))
```

```{r}
# Separate x & y
train_x <- as.matrix(train_data[, -1])  # Convert predictors to a matrix
train_y <- as.factor(train_data$category)  # Ensure response is a factor
test_x <- as.matrix(test_data[, -1])

# multinomial naive bayes
nb_model <- multinomial_naive_bayes(train_x, train_y)
nb_predictions <- predict(nb_model, newdata = test_x)
nb_predictions <- factor(nb_predictions, levels = levels(train_y))
test_data$category <- factor(test_data$category, levels = levels(train_y))

# confusion matrix
conf_matrix <- confusionMatrix(nb_predictions, test_data$category)
print(conf_matrix)

# Precision and Recall
conf_table <- conf_matrix$table
precision <- diag(conf_table) / rowSums(conf_table)
recall <- diag(conf_table) / colSums(conf_table)
print("Precision by class:")
print(precision)
print("Recall by class:")
print(recall)
```

```{r}
# Train a Multinomial Logistic Regression model
log_reg_model <- multinom(category ~ ., data = train_data)
log_reg_predictions <- predict(log_reg_model, newdata = test_data)
log_reg_predictions <- factor(log_reg_predictions, levels = levels(test_data$category))

# confusion matrix
conf_matrix_log_reg <- confusionMatrix(log_reg_predictions, test_data$category)
print(conf_matrix_log_reg)

# Precision and Recall for each class
conf_table_log_reg <- conf_matrix_log_reg$table
precision_log_reg <- diag(conf_table_log_reg) / rowSums(conf_table_log_reg)
recall_log_reg <- diag(conf_table_log_reg) / colSums(conf_table_log_reg)

# Print precision and recall for each class
print("Precision by class:")
print(precision_log_reg)
print("Recall by class:")
print(recall_log_reg)
```
